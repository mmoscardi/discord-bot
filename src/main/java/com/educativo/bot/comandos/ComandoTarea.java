package com.educativo.bot.comandos;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.educativo.bot.modelos.Tarea;
import com.educativo.bot.modelos.Usuario;
import com.educativo.bot.utils.FormateadorMensajes;

/**
 * CONCEPTO: HERENCIA y POLIMORFISMO
 * 
 * Esta clase HEREDA de ComandoBase y demuestra:
 * 1. Herencia: Obtiene funcionalidad de la clase padre
 * 2. Polimorfismo por sobrescritura: Redefine m√©todos de la clase padre
 * 3. Polimorfismo por implementaci√≥n: Implementa m√©todos abstractos
 * 
 * ComandoTarea permite gestionar tareas de estudio de los usuarios.
 */
public class ComandoTarea extends ComandoBase {
    
    // Simulaci√≥n de almacenamiento en memoria (en una app real ser√≠a una base de datos)
    private static final List<Tarea> tareas = new ArrayList<>();
    private static final List<Usuario> usuarios = new ArrayList<>();
    
    /**
     * Constructor de la clase hija
     * Demuestra herencia al llamar al constructor padre con 'super'
     */
    public ComandoTarea() {
        // HERENCIA: Llamada al constructor de ComandoBase
        super(
            "tarea",
            "Permite crear, listar y gestionar tareas de estudio",
            "!tarea [crear|listar|completar] [par√°metros]\n\n" +
            "**CREAR TAREA:**\n" +
            "‚Ä¢ `!tarea crear \"<t√≠tulo>\" [\"descripci√≥n\"] [materia]`\n" +
            "‚Ä¢ Ejemplo: `!tarea crear \"Estudiar cap√≠tulo 5\" \"Revisar ejemplos\" MAT101`\n" +
            "‚Ä¢ T√≠tulo: Obligatorio, entre comillas si tiene espacios\n" +
            "‚Ä¢ Descripci√≥n: Opcional, entre comillas si tiene espacios\n" +
            "‚Ä¢ Materia: Opcional, c√≥digo de materia (sin comillas)\n\n" +
            "**OTROS COMANDOS:**\n" +
            "‚Ä¢ `!tarea listar` - Ver todas las tareas\n" +
            "‚Ä¢ `!tarea completar <n√∫mero>` - Marcar tarea como completada",
            false  // No requiere permisos especiales
        );
    }
    
    /**
     * POLIMORFISMO por implementaci√≥n
     * 
     * Implementamos el m√©todo abstracto de la clase padre.
     * Este m√©todo define el comportamiento espec√≠fico de este comando.
     */
    @Override
    public String ejecutar(String[] args, String canalId, String usuarioId) {
        // Usar m√©todo heredado para validar argumentos b√°sicos
        if (!validarArgumentos(args, 1)) {
            return formatearError("Debes especificar una acci√≥n: crear, listar o completar");
        }
        
        String accion = args[0].toLowerCase();
        
        // Usar polimorfismo en el procesamiento seg√∫n la acci√≥n
        switch (accion) {
            case "crear":
                return procesarCrearTarea(args, usuarioId);
            case "listar":
                return procesarListarTareas(args, usuarioId);
            case "completar":
                return procesarCompletarTarea(args, usuarioId);
            default:
                return formatearError("Acci√≥n no reconocida: " + accion + 
                                    ". Usa: crear, listar o completar");
        }
    }
    
    /**
     * Procesa la creaci√≥n de una nueva tarea - VERSI√ìN SIMPLIFICADA
     */
    private String procesarCrearTarea(String[] args, String usuarioId) {
        if (args.length < 2) {
            return FormateadorMensajes.usoIncorrecto("tarea", 
                "!tarea crear \"T√≠tulo\" [\"Descripci√≥n\"] [MATERIA]");
        }
        
        // Unir argumentos y parsear comillas
        StringBuilder argumentosTexto = new StringBuilder();
        for (int i = 1; i < args.length; i++) {
            if (i > 1) argumentosTexto.append(" ");
            argumentosTexto.append(args[i]);
        }
        
        String[] parametros = parsearArgumentosEntreComillas(argumentosTexto.toString());
        
        if (parametros.length < 1 || parametros[0].trim().isEmpty()) {
            return FormateadorMensajes.error("El t√≠tulo es obligatorio");
        }
        
        String titulo = parametros[0].trim();
        String descripcionTarea = parametros.length > 1 ? parametros[1].trim() : "";
        String materia = parametros.length > 2 ? parametros[2].trim() : "General";
        
        try {
            Tarea nuevaTarea = new Tarea(
                UUID.randomUUID().toString(),
                titulo, 
                descripcionTarea, 
                materia, 
                usuarioId, 
                2
            );
            
            tareas.add(nuevaTarea);
            buscarOCrearUsuario(usuarioId); // Crear usuario si no existe
            
            return FormateadorMensajes.tareaCreada(nuevaTarea);
            
        } catch (Exception e) {
            return FormateadorMensajes.error("Error al crear tarea: " + e.getMessage());
        }
    }
    
    /**
     * Procesa el listado de tareas - VERSI√ìN SIMPLIFICADA
     */
    private String procesarListarTareas(String[] args, String usuarioId) {
        return FormateadorMensajes.listaTareas(tareas, null);
    }
    
    /**
     * Procesa la completaci√≥n de una tarea - VERSI√ìN SIMPLIFICADA
     */
    private String procesarCompletarTarea(String[] args, String usuarioId) {
        if (args.length < 2) {
            return FormateadorMensajes.usoIncorrecto("tarea", "!tarea completar NUMERO");
        }
        
        try {
            int numero = Integer.parseInt(args[1]) - 1;
            
            if (numero < 0 || numero >= tareas.size()) {
                return FormateadorMensajes.error("N√∫mero de tarea inv√°lido (1-" + tareas.size() + ")");
            }
            
            Tarea tarea = tareas.get(numero);
            
            if (tarea.isCompletada()) {
                return FormateadorMensajes.info("Esta tarea ya est√° completada");
            }
            
            tarea.setCompletada(true);
            
            // Otorgar puntos al usuario
            Usuario usuario = buscarOCrearUsuario(usuarioId);
            usuario.agregarPuntos(10 * tarea.getPrioridad(), tarea.getMateria());
            
            return FormateadorMensajes.exito("üéâ ¬°Tarea completada!\n" +
                                "+" + (10 * tarea.getPrioridad()) + " puntos\n\n" +
                                tarea.toString());
            
        } catch (NumberFormatException e) {
            return FormateadorMensajes.error("El n√∫mero debe ser v√°lido");
        }
    }
    
    /**
     * Busca un usuario existente o crea uno nuevo
     * M√©todo auxiliar que demuestra encapsulamiento
     */
    private Usuario buscarOCrearUsuario(String usuarioId) {
        // Buscar usuario existente
        for (Usuario usuario : usuarios) {
            if (usuario.getId().equals(usuarioId)) {
                return usuario;
            }
        }
        
        // Crear nuevo usuario si no existe
        Usuario nuevoUsuario = new Usuario(usuarioId, "Usuario_" + usuarioId.substring(0, 6));
        usuarios.add(nuevoUsuario);
        return nuevoUsuario;
    }
    
    /**
     * M√©todo est√°tico para acceder a las tareas desde otros comandos
     * Demuestra encapsulamiento controlado de datos compartidos
     * 
     * @return Lista de usuarios registrados
     */
    public static List<Usuario> getUsuarios() {
        return usuarios;
    }
    
    /**
     * M√©todo est√°tico para acceder a las tareas desde otros comandos
     * Demuestra encapsulamiento controlado de datos compartidos
     * 
     * @return Lista de tareas registradas
     */
    public static List<Tarea> getTareas() {
        return tareas;
    }
    
    /**
     * SOBRESCRITURA del m√©todo toString
     * Proporciona informaci√≥n espec√≠fica sobre este comando
     */
    @Override
    public String toString() {
        return String.format("ComandoTarea{nombre='%s', tareasRegistradas=%d}", 
                           getNombre(), tareas.size());
    }
}
